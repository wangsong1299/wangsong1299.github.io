{"version":3,"sources":["pages/Xbumper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Input.js"],"names":["PageView","useState","active","setActive","opNum","setOpNum","availableNum","setTotalStake","setApy","useEffect","lifetimeObj","mapData","ANOTotalStake","value","pool1Apy","ctx","unmapActions","className","style","justifyContent","onClick","token","onChange","balance","paddingTop","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","unsupportedIterableToArray","TypeError","ComponentView","props","placeholder","placeholderText","type","event","target"],"mappings":"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","file":"static/js/10.ea8caafd.chunk.js","sourcesContent":["// bumper\nimport { useEffect, useState } from 'react';\nimport ctx, { mapData, unmapActions } from '../events';\nimport Input from '../components/Input';\nimport '../styles/common.scss';\n\nconst headerTextList = [\n  'Pool',\n  'Rewards',\n  'APY',\n  'Total Staked',\n  'My Staked',\n  'My Rewards'\n]\n\nconst PageView = () => {\n  const [active, setActive] = useState('stake');\n  const [opNum, setOpNum] = useState(0);\n  const [availableNum, setAvailableNum] = useState(0);\n\n  const [totalStake, setTotalStake] = useState(0);\n  const [apy, setApy] = useState(0);\n\n  // INIT\n  useEffect(() => {\n    const lifetimeObj = {};\n\n    mapData({\n      ANOTotalStake(value) { setTotalStake(value); },\n      pool1Apy(value) { setApy(value); }\n    }, ctx, lifetimeObj);\n\n    return () => {\n      unmapActions(lifetimeObj);\n    }\n  }, []);\n\n\n  return (\n    <div className=\"page-center xbumper\" style={{ justifyContent: 'flex-start' }}>\n      <div className=\"container\">\n        <div className=\"box\">\n          <div className=\"title\">{active === 'stake' ? 'Stake BUMPER for xBUMPER' : 'Unstake xBUMPER for BUMPER'}</div>\n          <div className=\"navigator\">\n            <div className={`navtab ${active === 'stake' ? 'active' : ''}`} onClick={() => { setActive('stake') }}>STAKE</div>\n            <div className={`navtab ${active === 'unstake' ? 'active' : ''}`} onClick={() => { setActive('unstake') }}>UNSTAKE</div>\n          </div>\n          <div className='text'><span className='bGreen'>1</span> xBUMPER = <span className='bGreen'>1.0311</span> BUMPER</div>\n          <div className='text'>Total Supply: <span className='bGreen'>7,054</span> xBUMPER</div>\n          <div className='text'><span className='dotted'>APR</span>: Daily<span className='bGreen'> 0.6%</span> - Weekly <span className='bGreen'>4.0%</span> - Yearly <span className='bGreen'>207.0%</span></div>\n          {\n            active === 'stake' ?\n              <>\n                <div className=\"flex balance\">\n                  <div className=\"flex1 tal\">My BUMPER Balance</div>\n                  <div className=\"flex1 tar\"><span className='bGreen'> 0.00</span>&nbsp;&nbsp;Bumper</div>\n                </div>\n                <div className=\"flex op\">\n                  <div className=\"flex2\">\n                    <Input\n                      className=\"mine-input left\"\n                      token='Bumper'\n                      value={opNum}\n                      onChange={(opNum) => { setOpNum(opNum) }}\n                      balance={availableNum}\n                    />\n                  </div>\n                  <button className=\"btn\">You have no BUMPER!</button>\n                </div>\n                <div className=\"text2\" style={{ paddingTop: '10px' }}>\n                  xBUMPER can be minted by staking BUMPER.\n              </div>\n              </>\n              :\n              <>\n                <div className=\"flex balance\">\n                  <div className=\"flex1 tal\">My xBUMPER Balance</div>\n                  <div className=\"flex1 tar\"><span className='bGreen'> 0.00</span>&nbsp;&nbsp;xBUMPER(<span className='bGreen'> 0.00</span>&nbsp;&nbsp;BUMPER)</div>\n                </div>\n                <div className=\"flex op\">\n                  <div className=\"flex2\">\n                    <Input\n                      className=\"mine-input left\"\n                      token='xBumper'\n                      value={opNum}\n                      onChange={(opNum) => { setOpNum(opNum) }}\n                      balance={availableNum}\n                    />\n                  </div>\n                  <button className=\"btn\">You have no xBUMPER!</button>\n                </div>\n                <div className=\"text2\" style={{ paddingTop: '10px' }}>\n                  To convert xBUMPER to BUMPER, unstake xBUMPER for BUMPER\n              </div>\n              </>\n          }\n          <div className=\"text2\">\n            Phase I (now): <span className=\"bGreen\">40 BUMPER</span>/day are rewarded to xBUMPER stakers.\n              </div>\n          <div className=\"text2 future\">\n            Phase II (future): protocol fees will be shared with xBUMPER stakers.\n              </div>\n          <div className=\"text2\">\n            Read more about xBUMPER <span className=\"underline\">here</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n};\n\nexport default PageView;\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// bumper\n/**\n * Balance 输入框\n */\n\nimport React from 'react'\n\nimport './Input.scss';\n\nconst ComponentView = (props) => {\n  const {\n    token='',\n    placeholder='',\n    value='',\n    balance=0,\n    onChange=() => {},\n    className=''\n  } = props;\n  const placeholderText = placeholder ? placeholder: `Amount of ${token}`\n  return (\n    <div className={className}>\n      <div className=\"balance-input\">\n        <input\n          type=\"number\"\n          value={value}\n          placeholder={placeholderText}\n          onChange={\n            (event) => onChange(event.target.value)\n          }\n        />\n        <div>\n          <span className=\"max\" onClick={() => onChange(balance)}>Max</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ComponentView;\n"],"sourceRoot":""}